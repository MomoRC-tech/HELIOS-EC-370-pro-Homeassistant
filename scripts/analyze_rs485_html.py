import re
import sys
import html as _html
from typing import List, Dict, Any, Optional, Tuple

# Best-effort parser for the Helios RS-485 HTML log generated by rs485_logger.py
# Usage: python scripts/analyze_rs485_html.py path/to/log.html

TR_RE = re.compile(r"<tr[^>]*class=\"([^\"]*)\"[^>]*>(.*?)</tr>", re.DOTALL | re.IGNORECASE)
TD_RE = re.compile(r"<td[^>]*>(.*?)</td>", re.DOTALL | re.IGNORECASE)
TAG_RE = re.compile(r"<[^>]+>")

VAR_ALIASES = {
    "Var_07_date_month_year": 0x07,
    "Var_08_time_hour_min": 0x08,
}


def _clean(s: str) -> str:
    s = _html.unescape(s)
    s = TAG_RE.sub("", s)
    return s.strip()


def parse_rows(html_text: str) -> List[Dict[str, Any]]:
    rows = []
    for m in TR_RE.finditer(html_text):
        klass = m.group(1) or ""
        inner = m.group(2) or ""
        tds = [ _clean(x) for x in TD_RE.findall(inner) ]
        # Expected columns: Time | Dir | Type | Var | Summary | Hex
        cols = {
            "time": tds[0] if len(tds) > 0 else "",
            "dir": tds[1] if len(tds) > 1 else "",
            "type": tds[2] if len(tds) > 2 else "",
            "var": tds[3] if len(tds) > 3 else "",
            "summary": tds[4] if len(tds) > 4 else "",
            "hex": tds[5] if len(tds) > 5 else "",
        }
        rows.append({
            "class": klass,
            **cols,
        })
    return rows


def var_code_from_label(label: str) -> Optional[int]:
    label = label.strip()
    if not label:
        return None
    if label in VAR_ALIASES:
        return VAR_ALIASES[label]
    if label.startswith("0x"):
        try:
            return int(label, 16)
        except Exception:
            return None
    if label.isdigit():
        try:
            return int(label)
        except Exception:
            return None
    # Fallback: try to map Var_XX names if present
    if label.startswith("Var_"):
        parts = label.split("_")
        if len(parts) >= 2:
            try:
                return int(parts[1], 16) if parts[1].startswith("0x") else int(parts[1])
            except Exception:
                return None
    return None


def summarize(rows: List[Dict[str, Any]]) -> Dict[str, Any]:
    pings = 0
    events: List[Dict[str, Any]] = []
    for r in rows:
        klass = r.get("class", "")
        if "cat-ping" in klass:
            pings += 1
            continue
        # Only care about known/unknown data rows
        direction = "rx" if "dir-rx" in klass else ("tx" if "dir-tx" in klass else "")
        var_label = r.get("var", "")
        var_code = var_code_from_label(var_label)
        events.append({
            "dir": direction,
            "var": var_code,
            "var_label": var_label,
            "summary": r.get("summary", ""),
            "hex": r.get("hex", ""),
        })

    # Focus on Var_07 and Var_08
    def filt(code: int, direction: Optional[str] = None) -> List[Dict[str, Any]]:
        out = [e for e in events if e["var"] == code]
        if direction:
            out = [e for e in out if e["dir"] == direction]
        return out

    v07_tx = filt(0x07, "tx")
    v07_rx = filt(0x07, "rx")
    v08_tx = filt(0x08, "tx")
    v08_rx = filt(0x08, "rx")

    # Split TX into write vs read requests using summary heuristic (cmd=0x00 -> read, cmd=0x01 -> write)
    def split_tx(lst: List[Dict[str, Any]]) -> Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:
        writes, reads = [], []
        for e in lst:
            s = (e.get("summary", "") or "").lower()
            if "cmd=0x01" in s:
                writes.append(e)
            elif "cmd=0x00" in s:
                reads.append(e)
            else:
                # Fallback by hex payload second byte
                hx = (e.get("hex", "") or "").strip().split()
                try:
                    if len(hx) >= 2 and int(hx[1], 16) == 0x01:
                        writes.append(e)
                    elif len(hx) >= 2 and int(hx[1], 16) == 0x00:
                        reads.append(e)
                    else:
                        reads.append(e)
                except Exception:
                    reads.append(e)
        return writes, reads

    v07_tx_w, v07_tx_r = split_tx(v07_tx)
    v08_tx_w, v08_tx_r = split_tx(v08_tx)

    return {
        "pings": pings,
        "v07_tx_count": len(v07_tx),
        "v07_tx_writes": len(v07_tx_w),
        "v07_tx_reads": len(v07_tx_r),
        "v07_rx_count": len(v07_rx),
        "v08_tx_count": len(v08_tx),
        "v08_tx_writes": len(v08_tx_w),
        "v08_tx_reads": len(v08_tx_r),
        "v08_rx_count": len(v08_rx),
        "v07_tx": v07_tx[:5],
        "v07_tx_w": v07_tx_w[:5],
        "v07_tx_r": v07_tx_r[:5],
        "v07_rx": v07_rx[:5],
        "v08_tx": v08_tx[:5],
        "v08_tx_w": v08_tx_w[:5],
        "v08_tx_r": v08_tx_r[:5],
        "v08_rx": v08_rx[:5],
    }


def main():
    if len(sys.argv) < 2:
        print("Usage: python scripts/analyze_rs485_html.py <log.html>")
        sys.exit(2)
    path = sys.argv[1]
    with open(path, "r", encoding="utf-8", errors="ignore") as f:
        text = f.read()
    rows = parse_rows(text)
    if not rows:
        print("No rows parsed â€” is this a Helios RS-485 HTML log?")
        sys.exit(1)
    rep = summarize(rows)
    print("=== Helios RS-485 HTML log summary ===")
    print(f"Pings: {rep['pings']}")
    print(f"Var_07 (date) TX: {rep['v07_tx_count']}  (writes={rep['v07_tx_writes']} reads={rep['v07_tx_reads']})  RX: {rep['v07_rx_count']}")
    print(f"Var_08 (time) TX: {rep['v08_tx_count']}  (writes={rep['v08_tx_writes']} reads={rep['v08_tx_reads']})  RX: {rep['v08_rx_count']}")
    def _preview(lst: List[Dict[str, Any]], name: str):
        if not lst:
            print(f"{name}: (none)")
            return
        print(f"{name}: (first {len(lst)} shown)")
        for e in lst:
            print(f"  {e['dir']} {e['var_label'] or hex(e['var'] or 0)}  {e['summary'][:80]}  {e['hex'][:80]}")
    _preview(rep["v07_tx"], "Var_07 TX (mixed)")
    _preview(rep["v07_tx_w"], "Var_07 TX writes")
    _preview(rep["v07_tx_r"], "Var_07 TX read-reqs")
    _preview(rep["v07_rx"], "Var_07 RX")
    _preview(rep["v08_tx"], "Var_08 TX (mixed)")
    _preview(rep["v08_tx_w"], "Var_08 TX writes")
    _preview(rep["v08_tx_r"], "Var_08 TX read-reqs")
    _preview(rep["v08_rx"], "Var_08 RX")

if __name__ == "__main__":
    main()
